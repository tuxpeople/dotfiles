#!/usr/bin/env bash

### --- String & Random Utilities ---

# Generate a random string
randomstr() {
	local len=${1:-20}
	LC_ALL=C tr -dc '[:graph:]' </dev/urandom | head -c "$len"
	echo
}

# Upload stdin to hastebin-style server
haste() {
	local a
	a=$(cat)
	curl -X POST -s -d "$a" https://paste.eighty-three.me/documents | awk -F '"' '{print "https://paste.eighty-three.me/"$4}'
}

### --- Directory / File Tools ---

# Make directory and cd into it
mkd() {
	mkdir -p "$@" && cd "$_"
}

# Change to top-most Finder window (macOS only)
cdf() {
	[[ "$OSTYPE" == "darwin"* ]] || return
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# Compare original and gzipped file size
gz() {
	local origsize=$(wc -c <"$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Create a .tar.gz archive using best available compressor
targz() {
	local tmpFile
	tmpFile="$(mktemp /tmp/tar.XXXXXX)"
	local dir="$1"
	shift
	tar -cf "$tmpFile" "$dir" "$@"
	if command -v pigz &>/dev/null; then
		pigz "$tmpFile" >"${dir}.tar.gz"
	else
		gzip "$tmpFile" >"${dir}.tar.gz"
	fi
	rm -f "$tmpFile"
}

# Enhanced tree command
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

### --- Git Enhancements ---

# Use git diff with color if available
if command -v git &>/dev/null; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

### --- Servers ---

# Start HTTP server from current dir (Python 2/3)
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &

	if command -v python3 &>/dev/null; then
		python3 -m http.server "$port"
	else
		python -c $'import SimpleHTTPServer;
map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;
map[""] = "text/plain";
for key, value in map.items():
	map[key] = value + ";charset=UTF-8";
SimpleHTTPServer.test();' "$port"
	fi
}

# Start PHP server from current dir (macOS only, PHP 5.4+)
phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

### --- Networking / SSL Tools ---

# Run dig with simplified useful output
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Show CNs and SANs from SSL cert
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}â€¦"
	echo

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux,no_header,no_issuer,no_pubkey,no_serial,no_sigdump,no_signame,no_validity,no_version")

		echo "Common Name:"
		echo
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" -e "s/\/emailAddress=.*//"
		echo
		echo "Subject Alternative Name(s):"
		echo
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

### --- Cross-platform Open ---

# Normalize open command
if [[ "$(uname -s)" != "Darwin" ]]; then
	if grep -q Microsoft /proc/version 2>/dev/null; then
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# `o` opens current directory or argument(s)
o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}
